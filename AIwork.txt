import tensorflow as tf

import tensorflow.examples.tutorials.mnist.input_data as input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

print('train',mnist.train.num_examples,
      ',validation',mnist.validation.num_examples,
      ',test',mnist.test.num_examples)

print('train images:', mnist.train.images.shape,
      'labels:', mnist.train.labels.shape)

len(mnist.train.images[0])

import matplotlib.pyplot as plt
def plot_image(image):
    plt.imshow(image.reshape(28,28),cmap='binary')
    plt.show()
plot_image(mnist.train.images[0])

mnist.train.labels[0]
import numpy as np
np.argmax(mnist.train.labels[0])

print('validation images:', mnist.validation.images.shape,
      'labels:', mnist.validation.labels.shape)

import matplotlib.pyplot as plt
def plot_images_labels_prediction(images,labels,
                                  prediction,idx,num=10):
    fig = plt.gcf()
    fig.set_size_inches(12, 14)
    if num>25: num=25 
    for i in range(0, num):
        ax=plt.subplot(5,5, 1+i)
        
        ax.imshow(np.reshape(images[idx],(28, 28)), 
                  cmap='binary')
            
        title= "label=" +str(np.argmax(labels[idx]))
        if len(prediction)>0:
            title+=",predict="+str(prediction[idx]) 
            
        ax.set_title(title,fontsize=10) 
        ax.set_xticks([]);ax.set_yticks([])        
        idx+=1 
    plt.show()
plot_images_labels_prediction(mnist.validation.images,
                              mnist.validation.labels,[],0)

print('test images:', mnist.test.images.shape,
      'labels:', mnist.test.labels.shape)
plot_images_labels_prediction(mnist.test.images,
                              mnist.test.labels,[],0)

batch_images_xs, batch_labels_ys = \
     mnist.train.next_batch(batch_size=100)
    
print(len(batch_images_xs),
      len(batch_labels_ys))

def layer(output_dim,input_dim,inputs, activation=None):
    W = tf.Variable(tf.random_normal([input_dim, output_dim]))
    b = tf.Variable(tf.random_normal([1, output_dim]))
    XWb = tf.matmul(inputs, W) + b
    if activation is None:
        outputs = XWb
    else:
        outputs = activation(XWb)
    return outputs

# 建立输入层
x = tf.placeholder("float", [None, 784])

# 建立隐藏层h1
h1=layer(output_dim=256,input_dim=784,
         inputs=x ,activation=tf.nn.relu)  

# 建立输出层
y_predict=layer(output_dim=10,input_dim=256,
                    inputs=h1,activation=None)

# 建立训练数据 label 真实值的 placeholder
y_label = tf.placeholder("float", [None, 10])

# 定义 loss function

loss_function = tf.reduce_mean(
                  tf.nn.softmax_cross_entropy_with_logits
                         (logits=y_predict , 
                          labels=y_label))

# 选择 optimizer
optimizer = tf.train.AdamOptimizer(learning_rate=0.001) \
                    .minimize(loss_function)

# 计算每一项数据是否正確预测
# tf.equal,相等返回1，不等返回0
correct_prediction = tf.equal(tf.argmax(y_label  , 1),
                              tf.argmax(y_predict, 1))

# 将計算预测正确结果，加权平均
# 先使用 tf.cast 转化为 float，再使用 tf.reduce_mean 将所有值平均
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))

trainEpochs = 15
batchSize = 100
totalBatchs = int(mnist.train.num_examples/batchSize)
epoch_list=[];loss_list=[];accuracy_list=[]
from time import time
startTime=time()
sess = tf.Session() # 	计算时间
sess.run(tf.global_variables_initializer())

# for each epoch
for epoch in range(trainEpochs):
    # for each mini-batch
    for i in range(totalBatchs):
        # 调用读mini-batch的函数
        batch_x, batch_y = mnist.train.next_batch(batchSize)
        # 训练优化器，最小化损失函数，输入x和y
        sess.run(optimizer,feed_dict={x: batch_x,y_label: batch_y})
    # 在验证集上计算精度和误差
    loss,acc = sess.run([loss_function,accuracy],
                        feed_dict={x: mnist.validation.images, 
                                   y_label: mnist.validation.labels})
    # 显示训练结果并存入列表
    epoch_list.append(epoch)
    loss_list.append(loss)
    accuracy_list.append(acc)    
    print("Train Epoch:", '%02d' % (epoch+1), "Loss=", \
                "{:.9f}".format(loss)," Accuracy=",acc)
                
# 计算训练的时间 
duration =time()-startTime
print("Train Finished takes:",duration)

# matplotlib inline
import matplotlib.pyplot as plt
fig = plt.gcf()
fig.set_size_inches(5,3)
plt.plot(epoch_list, loss_list, label = 'loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['loss'])
plt.show()
plt.plot(epoch_list, accuracy_list,label="accuracy" )
fig = plt.gcf()
fig.set_size_inches(5,3)
plt.ylim(0.8,1) # 设置y轴的范围
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend()
plt.show()

print("Accuracy:", sess.run(accuracy,
                           feed_dict={x: mnist.test.images,
                                      y_label: mnist.test.labels}))
prediction_result=sess.run(tf.argmax(y_predict,1),
                           feed_dict={x: mnist.test.images })
prediction_result[:10]
import matplotlib.pyplot as plt
import numpy as np
def plot_images_labels_prediction(images,labels,
                                  prediction,idx,num=10):
    fig = plt.gcf()
    fig.set_size_inches(12, 14)
    if num>25: num=25 
    for i in range(0, num):
        ax=plt.subplot(5,5, 1+i)
        
        ax.imshow(np.reshape(images[idx],(28, 28)), 
                  cmap='binary')
            
        title= "label=" +str(np.argmax(labels[idx]))
        if len(prediction)>0:
            title+=",predict="+str(prediction[idx]) 
            
        ax.set_title(title,fontsize=10) 
        ax.set_xticks([]);ax.set_yticks([])        
        idx+=1 
    plt.show()
plot_images_labels_prediction(mnist.test.images,
                              mnist.test.labels,
                              prediction_result,0)
y_predict_Onehot=sess.run(y_predict,
                          feed_dict={x: mnist.test.images })

y_predict_Onehot[0]
for i in range(400):
    if prediction_result[i]!=np.argmax(mnist.test.labels[i]):
        print("i="+str(i)+
              "   label=",np.argmax(mnist.test.labels[i]),
              "predict=",prediction_result[i])
x = tf.placeholder("float", [None, 784])

h1=layer(output_dim=1000,input_dim=784,
         inputs=x ,activation=tf.nn.relu)  

y_predict=layer(output_dim=10,input_dim=1000,
                    inputs=h1,activation=None)
print("Accuracy:", sess.run(accuracy,
                           feed_dict={x: mnist.test.images, 
                                      y_label: mnist.test.labels}))
x = tf.placeholder("float", [None, 784])

h1=layer(output_dim=1000,input_dim=784,
         inputs=x ,activation=tf.nn.relu) 

h2=layer(output_dim=1000,input_dim=1000,
         inputs=h1 ,activation=tf.nn.relu)  

y_predict=layer(output_dim=10,input_dim=1000,
                inputs=h2,activation=None)
print("Accuracy:", sess.run(accuracy,
                           feed_dict={x: mnist.test.images, 
                                      y_label: mnist.test.labels}))
def count2():
    print np.sum([np.prod(v.get_shape().as_list()) for v in tf.trainable_variables()])
def count1():
    total_parameters = 0
    for variable in tf.trainable_variables():
        # shape is an array of tf.Dimension
        shape = variable.get_shape()
        # print(shape)
        # print(len(shape))
        variable_parameters = 1
        for dim in shape:
            # print(dim)
            variable_parameters *= dim.value
        # print(variable_parameters)
        total_parameters += variable_parameters
    print(total_parameters)

def get_nb_params_shape(shape):
    '''
    Computes the total number of params for a given shap.
    Works for any number of shapes etc [D,F] or [W,H,C] computes D*F and W*H*C.
    '''
    nb_params = 1
    for dim in shape:
        nb_params = nb_params*int(dim)
    return (nb_params)

def count3():
    tot_nb_params = 0
    for trainable_variable in tf.trainable_variables():
        shape = trainable_variable.get_shape()  # e.g [D,F] or [W,H,C]
        current_nb_params = get_nb_params_shape(shape)
        tot_nb_params = tot_nb_params + current_nb_params
    print (tot_nb_params)

def count5():
    total_parameters = 0
    # iterating over all variables
    for variable in tf.trainable_variables():
        local_parameters = 1
        shape = variable.get_shape()  # getting shape of a variable
        for i in shape:
            local_parameters *= i.value  # mutiplying dimension values
        total_parameters += local_parameters
    print(total_parameters)
    
def count6():
    total_parameters = 0
    for variable in tf.trainable_variables():
        variable_parameters = 1
        for dim in variable.get_shape():
            variable_parameters *= dim.value
        total_parameters += variable_parameters
    print(total_parameters)
    
def count7():
    from functools import reduce
    from operator import mul
    num_params = 0
    for variable in tf.trainable_variables():
        shape = variable.get_shape()
        num_params += reduce(mul, [dim.value for dim in shape], 1)
    print (num_params)
